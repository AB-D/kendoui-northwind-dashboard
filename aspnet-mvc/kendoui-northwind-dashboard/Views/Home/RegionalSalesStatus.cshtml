@using KendoUI.Northwind.Dashboard.Models;
<style>
    /*#dateFilter {
        float: right;
    }
    .fleft {
        float:left;
        height: 500px;
        width: 300px;
    }

    #mapContainer {
        height:300px;
        width:300px;
    }
    #marketShareContainer {
        height:300px;
        width:300px;
    }
    #revenueContainer {
        height:50px;
        width:300px;
    }
    #ordersContainer {
        height:50px;
        width:300px;
    }
    #customersContainer {
        height:50px;
        width:300px;
    }*/
</style>
<script src="@Url.Content("~/Scripts/chroma.min.js")"></script> 
<script type="text/javascript">
    var scale = chroma.scale(["#ade1fb", "#097dc6"]).domain([1, 100]),
        selectedShape = null;
    
   
    $(document).ready(function () {
        $("#RegionalSalesStatus").addClass("active");
        $("#dateFilter").kendoValidator({
            rules: {
                startDate: function (input) {
                    if (input.is("#StartDate")) {
                        startDate = kendo.parseDate(input.val());
                        endDate = kendo.parseDate($("#EndDate").val());
                        if (startDate > endDate) {
                            return false;
                        }
                    }
                    return true;
                },
                endDate: function (input) {
                    if (input.is("#EndDate")) {
                        startDate = kendo.parseDate($("#StartDate").val());
                        endDate = kendo.parseDate(input.val());
                        if (startDate > endDate) {
                            return false;
                        }
                    }
                    return true;
                },
            },
            messages: {
                startDate: "Start date should preceed the End date.",
                endDate: "End date should not preceed the Start date."
            }
        });
    });


    function onMarketShareDataBound(e) {
        var percentage = 0,
            revenue = 0;
        if (this.dataSource.data().length == 2) {
            percentage = (this.dataSource.at(1).Sales / this.dataSource.at(0).Sales);
            revenue = this.dataSource.at(1).Sales;
        }  
        $("#MarketShareLabel").text(kendo.toString(percentage, "p2"));
        $("#RevenueLabel").text(kendo.toString(revenue, "c2"));
    }


    function onCriteriaChange() {
        var MarketShare = $("#MarketShare").data("kendoChart"),
            TopSellingProducts = $("#TopSellingProducts").data("kendoChart"),
            Revenue = $("#Revenue").data("kendoSparkline"),
            Orders = $("#Orders").data("kendoSparkline"),
            Customers = $("#Customers").data("kendoSparkline"),
            country = "",
            fromDate = $("#StartDate").data("kendoDatePicker").value(),
            toDate = $("#EndDate").data("kendoDatePicker").value();

        if (selectedShape) {
            country = selectedShape.dataItem.properties.name;
        }

        $.ajax({
            url: "http://localhost:65141/RegionalSales/CountryOrdersTotal",
            dataType: "json",
            data: { Country: country, FromDate: fromDate.toJSON(), ToDate: toDate.toJSON() },
            type: "POST",
            success: function (response) {
                $("#OrdersLabel").text(response.Orders);
            }
        });

        $.ajax({
            url: "http://localhost:65141/RegionalSales/CountryCustomersTotal",
            dataType: "json",
            data: { Country: country, FromDate: fromDate.toJSON(), ToDate: toDate.toJSON() },
            type: "POST",
            success: function (response) {
                $("#CustomersLabel").text(response.Customers);
            }
        });

        MarketShare.dataSource.read({ Country: country, FromDate: fromDate, ToDate: toDate });
        TopSellingProducts.dataSource.read({ Country: country, FromDate: fromDate, ToDate: toDate });
        Revenue.dataSource.read({ Country: country, FromDate: fromDate, ToDate: toDate });
        Orders.dataSource.read({ Country: country, FromDate: fromDate, ToDate: toDate });
        Customers.dataSource.read({ Country: country, FromDate: fromDate, ToDate: toDate });


        //$("#RevenueLabel").text(kendo.toString(revenue, "c2"));
        
    }

    function onShapeCreated(e) {
        var shape = e.shape;
        var sales = shape.dataItem.properties.sales;
        var color = scale(sales).hex();
        shape.fill(color);
    }

    function onShapeClick(e) { 
        if (selectedShape) {
            var sales = selectedShape.dataItem.properties.sales;
            var color = scale(sales).hex();
            selectedShape.options.set("fill.color", color);
            selectedShape.options.set("stroke.color", "white"); 
            selectedShape.dataItem.properties.selected = false;
        }

        e.shape.options.set("fill.color", "#0c669f");
        e.shape.options.set("stroke.color", "black");
        e.shape.dataItem.properties.selected = true;
        selectedShape = e.shape;

        $("#countryName").text(e.shape.dataItem.properties.name);
        $.ajax({
            url: "/RegionalSales/CountryCompanies",
            dataType: "json",
            data: { Country: e.shape.dataItem.properties.name },
            type: "POST",
            success: function (response) {
                var customers = "";
                for (var i = 0; i < response.length; i++) {
                    customers = customers + response[i].CompanyName + ", ";
                }
                customers = customers.substring(0, customers.length - 2);
                $("#countryCustomers span").text(customers);
            }
        })

        onCriteriaChange();
    }

    function onShapeMouseEnter(e) {
        e.shape.options.set("fill.color", "#0c669f");
    }

    function onShapeMouseLeave(e) { 
        if (!e.shape.dataItem.properties.selected) {
            var sales = e.shape.dataItem.properties.sales;
            var color = scale(sales).hex();
            e.shape.options.set("fill.color", color);
            e.shape.options.set("stroke.color", "white");
        }
    }
</script> 

<div id="main-section-header" class="row">
    <h2 id="team-efficiency" class="col-xs-3">Regional sales status</h2>   
    <div id="dateFilter" class="col-xs-9">
        <div class="period-wrapper">
            <label for="StartDate" class="select-period">Stats from</label>
            @(Html.Kendo().DatePicker() 
                .Name("StartDate")
                .Value(new DateTime(1996, 7, 1))
                .Events(e=>e.Change("onCriteriaChange"))
            )
            <span class="k-invalid-msg" data-for="StartDate"></span>
        </div>
        <div class="period-wrapper">    
            <label for="EndDate" class="select-period">To</label>
            @(Html.Kendo().DatePicker() 
                .Name("EndDate")
                .Value(new DateTime(1997, 7, 1))
                .Events(e=>e.Change("onCriteriaChange"))
            )
            <span class="k-invalid-msg" data-for="EndDate"></span>
        </div>
    </div>
    <div style="clear:both;"></div>
</div>

<div class="main-section-content row" style="">
    <div>
        <span>Pick a Country to view stats</span>
        <h3>COUNTRY</h3>
        <h1 id="countryName"></h1>
        <h3>CUSTOMERS</h3>
        <div id="countryCustomers"><span></span></div>
    </div>
    <div id="mapContainer">
        @(Html.Kendo().Map()
            .Name("map")
            .Center(50.000, 0)
            .Zoom(2)
            .Layers(layers => 
            {
                layers.Add()
                    .Style(style => style
                        .Fill(fill => fill.Color("#1996E4"))
                        .Stroke(stroke => stroke.Color("#FFFFFF"))
                    )
                    .Type(MapLayerType.Shape)
                    .DataSource(dataSource => dataSource
                        .GeoJson()
                        .Read(read => read.Url(Url.Content("~/Content/countries-sales.geo.json")))
                    );
            })
            .Events(events => events
                .ShapeCreated("onShapeCreated")
                .ShapeMouseEnter("onShapeMouseEnter")
                .ShapeMouseLeave("onShapeMouseLeave")
                .ShapeClick("onShapeClick")
            )
        )
    </div>

<div id="statsContainer">
    <span id="MarketShareLabel"></span>
    <span id="RevenueLabel"></span>
    <span id="OrdersLabel"></span>
    <span id="CustomersLabel"></span>
    <div id="marketShareContainer">
        @(Html.Kendo().Chart<CountryMarketShare_Result>()
            .Name("MarketShare")
            .Title("Market Share") 
            .Theme("metro")
            .AutoBind(false)
            .Events(e=>e.DataBound("onMarketShareDataBound"))
            .Legend(legend => legend
                .Visible(false)
            )
            .DataSource(ds => ds
                .Read(read => read.Action("MarketShareByCountry", "RegionalSales"))
            )
            .Series(series => {
                series.Donut("Sales", "Country");
            })
            .Tooltip(tooltip => tooltip
                .Visible(true)
                .Template("#= dataItem.Country #: #= kendo.toString(dataItem.Sales, 'c2') #")
            )
        )
   </div> 
    <div id="revenueContainer">
    @(Html.Kendo().Sparkline<CountryRevenue_Result>()
        .Name("Revenue")
        .Theme("metro")
        .AutoBind(false)
        .DataSource(ds => ds
            .Read(read => read.Action("CountryRevenue", "RegionalSales"))
        ) 
        .Series(series =>
        {
            series.Column(x => x.Value, categoryExpression: x => x.Date).Aggregate(ChartSeriesAggregate.Sum);
        })
        .CategoryAxis(axis=>axis
            .Date()
            .BaseUnit(ChartAxisBaseUnit.Months)
        )
    )
    </div> 
    <div id="ordersContainer">
    @(Html.Kendo().Sparkline<CountryOrders_Result>()
        .Name("Orders")
        .Theme("metro")
        .AutoBind(false)
        .DataSource(ds => ds
            .Read(read => read.Action("CountryOrders", "RegionalSales"))
        ) 
        .Series(series =>
        {
            series.Column(x => x.Value, categoryExpression: x => x.Date).Aggregate(ChartSeriesAggregate.Sum);
        })
        .CategoryAxis(axis=>axis
            .Date()
            .BaseUnit(ChartAxisBaseUnit.Months)
        )
    )
    </div> 
    <div id="customersContainer">
    @(Html.Kendo().Sparkline<CountryCustomers_Result>()
        .Name("Customers")
        .Theme("metro")
        .AutoBind(false)
        .DataSource(ds => ds
            .Read(read => read.Action("CountryCustomers", "RegionalSales"))
        ) 
        .Series(series =>
        {
            series.Column(x => x.Value, categoryExpression: x => x.Date).Aggregate(ChartSeriesAggregate.Sum);
        })
        .CategoryAxis(axis=>axis
            .Date()
            .BaseUnit(ChartAxisBaseUnit.Months)
        )
    )
    </div>
</div>

<div id="topProductsContainer">
    @(Html.Kendo().Chart<CountryTopProducts_Result>()
        .Name("TopSellingProducts") 
        .Theme("metro")
        .AutoBind(false)
        .Legend(legend => legend
            .Visible(false)
        )
        .DataSource(ds => ds
            .Group(g=>g.Add(f=>f.ProductName))
            .Read(read => read.Action("TopSellingProducts", "RegionalSales")))
        .Series(series => {
            series.Line(model => model.Quantity).Style(ChartLineStyle.Smooth);
        })
        .CategoryAxis(axis => axis
            .Categories(model => model.Date)
            .MajorGridLines(x=>x.Visible(false))
            .Labels(labels => labels.Rotation(-90))
        )
        .ValueAxis(axis => axis.Numeric() 
            .MajorUnit(50)
            .MajorTicks(x=>x.Visible(false))
        )
        .Tooltip(tooltip => tooltip
            .Visible(true)
            .Template("#=data.series.name.replace(data.series.field, data.value)#"))
    )
</div>
    </div>