@using KendoUI.Northwind.Dashboard.Models;
<div id="main-section-header" class="row">
    <h2 id="team-efficiency" class="col-xs-3">PRODUCTS & ORDERS</h2>
    <div style="clear:both;"></div>
</div>
@*<h3>TODO:</h3>
<ul>
    <li>Filter by date range</li>
</ul>*@

<link href="~/Content/flags.css" rel="stylesheet" />

<div id="products-orders-main-content" class="main-section-content">
<script type="text/javascript">
    function onCustomersEdit(e) {
        if(e.model.isNew()){
            e.container.find("td.k-hierarchy-cell").css({ visibility: "hidden" });
        }
    } 

    function onOrdersEdit(e) {
        if (e.model.isNew()) {
            e.container.find("td.k-hierarchy-cell").css({ visibility: "hidden" });
        } 
        var validator = e.container.kendoValidator({
            rules: {
                OrderDate: function (input, params) {
                    if (input.is("[name=OrderDate]")) {
                        var OrderDate = input.data("kendoDatePicker").value();
                        var ShippedDate = $('[name=ShippedDate]').data("kendoDatePicker").value();
                        if (OrderDate > ShippedDate) {
                            return false;
                        }
                    }
                    return true;
                },
                ShippedDate: function (input, params) {
                    if (input.is("[name=ShippedDate]")) {
                        var OrderDate = $('[name=OrderDate]').data("kendoDatePicker").value();
                        var ShippedDate = input.data("kendoDatePicker").value();
                        if (ShippedDate != null && OrderDate > ShippedDate) {
                            return false;
                        }
                    }
                    return true;
                }
            },
            messages: {
                OrderDate: function (input) {
                    return "OrderDate cannot be after ShippedDate";
                },
                ShippedDate: function (input) {
                    return "ShippedDate cannot be prior the Order date";
                }
            }
        }).data("kendoValidator"); 
    }
    function onOrdersSave(e) { 
    }
    function onOrdersCancel(e) { 
    }

    function onDataBound(e) {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    function onOrderDetailsDataBound(e) {
        var sum = 0; 
        for (var i = 0; i < this.dataSource.data().length ; i++) {
            sum = sum + GetOrderItemPrice(this.dataSource.at(i));
        }
        this.table.find("span[name=sum]").html(kendo.toString(sum, "c"));
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    function GetOrderItemPrice(data) { 
        var sum = data.UnitPrice * data.Quantity;
        sum = sum - (sum * data.Discount)
        return sum;
    }
</script>
    @(Html.Kendo().Grid<OrderViewModel>()
        .Name("orders")
        .ToolBar(t => t.Create().Text("Create new Order"))
        .Editable(e => e.Mode(GridEditMode.InLine))
        .Events(e => e
            .Edit("onOrdersEdit")
            .Save("onOrdersSave")
            .Cancel("onOrdersCancel")
            .DataBound("onDataBound")
        )
        .Columns(c =>
        {
            c.Bound(f => f.OrderID)
                .Title("ORDER ID")
                .Width(120);
            c.Bound(f => f.OrderDate)
               .Title("ORDER DATE")
               .Format("{0:d}")
               .Width(150);
            c.ForeignKey(f => f.CustomerID, (System.Collections.IEnumerable)ViewData["customers"], "CustomerID", "CompanyName")
                .Title("CUSTOMER")
                .EditorTemplateName("GridForeignKey");
            c.ForeignKey(f => f.EmployeeID, (System.Collections.IEnumerable)ViewData["employees"], "EmployeeID", "EmployeeName")
                .Title("EMPLOYEE")
                .EditorTemplateName("GridForeignKey");
            c.Bound(f => f.ShipCountry)
                .Title("SHIP COUNTRY")
                .ClientTemplate("<div class='country #=ShipCountry#'></div>#=ShipCountry#")
                .Width(150);
            c.ForeignKey(f => f.ShipVia, (System.Collections.IEnumerable)ViewData["shippers"], "ShipperID", "CompanyName")
               .Title("SHIP VIA")
               .EditorTemplateName("GridForeignKey");
            c.Command(f => {
                f.Edit();
                f.Destroy();
            }).Width(200);
    })
    .Pageable()
    .Sortable()
    .Selectable()
    .Navigatable()
    .Filterable()
    .ClientDetailTemplateId("Order_DetailTemplate")
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Model(m =>
        {
            m.Id(f => f.OrderID);
            m.Field(f => f.OrderID).Editable(false);
            m.Field(f => f.OrderDate).DefaultValue(DateTime.Today);
        })
        .Sort(s => s.Add(f=>f.OrderDate).Descending())
        
        .Read("Orders_Read", "Orders")
        .Create("Orders_Create", "Orders")
        .Update("Orders_Update", "Orders")
        .Destroy("Orders_Update", "Orders")
    )
)

 
<script id="Order_DetailTemplate"  type="text/x-kendo-tmpl"> 
    <h4>Details for order \\##=OrderID# </h4>
    @(Html.Kendo().TabStrip()
        .Name("order_details_tabstrip_#=OrderID#")
        .Items(items => {
            items.Add()
                .Text("PRODUCTS")
                .Selected(true)
                .Content(@<text>
                  @(Html.Kendo().Grid<OrderDetailViewModel>()
                    .Name("order_details#=OrderID#")
                    .Columns(c =>
                    {
                        //c.Template(f => new { }).Title("Product").ClientTemplate("<img src='" + Url.Content("~/Content/Products/") + "\\#:ProductID\\#.jpg' />")
                        //    .HtmlAttributes(new {style="padding:0;" })
                        //    .Width(110);
                        c.ForeignKey(f => f.ProductID, (System.Collections.IEnumerable)ViewData["products"], "ProductID", "ProductName")
                            .Title("PRODUCT NAME")
                            .EditorTemplateName("GridForeignKey");
                        c.Bound(f => f.UnitPrice)
                            .Format("{0:c}")
                            .Title("UNUT PRICE")
                            .Width(120);
                        c.Bound(f => f.Quantity)
                            .Title("QUANTITY")
                            .Width(120);
                        c.Bound(f => f.Discount)
                            .Title("DISCOUNT")
                            .Format("{0:p}")
                            .ClientFooterTemplate("Grand total:").Width(120);
                        c.Template(f => new { })
                            .Title("TOTAL")
                            .ClientTemplate("\\#=kendo.toString(GetOrderItemPrice(data), \"c\")\\#")
                            .ClientFooterTemplate("<span name='sum'></span>").Width(120);
                    })
                    .Events(e => {
                        e.DataBound("onOrderDetailsDataBound");
                        e.DetailInit("onDetailInit");
                    })
                    .Selectable()
                    .Navigatable()
                    .ClientDetailTemplateId("Product_DetailTemplate")
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Read("OrderDetails_Read", "OrderDetails", new { OrderID = "#=OrderID#" })
                    ).ToClientTemplate()
                )</text>);
            items.Add()
                .Text("SHIPPING DETAILS")
                .Content(@<text>
                      <div class='shipping-details'>
                            <ul>
                                <li><label>Name:</label>#= ShipName #</li>
                                <li><label>Country:</label>#= ShipCountry #</li>
                                <li><label>City:</label>#= ShipCity #</li>
                                <li><label>Address:</label>#= ShipAddress #</li>
                                <li><label>Postal Code:</label>#= ShipPostalCode #</li>
                            </ul>
                        </div>
                </text>);
        })
        .ToClientTemplate()
    )
</script>

    <script type="text/javascript">

        function onDetailInit(e) {
            console.log(e);
            var model = e.data;
            var detail = e.detailRow;
            $.ajax({
                url: '@Url.Action("Get_Product", "Products")',
                    data: {ID: model.ProductID},
                    success: function (receivedProduct) {
                        //debugger;
                        detail.find(".product-name").text(receivedProduct.ProductName);
                        detail.find(".product-category").text(receivedProduct.Category.CategoryName);
                        detail.find(".details-stock").text(receivedProduct.UnitsInStock);
                        detail.find(".details-orders").text(receivedProduct.UnitsOnOrder);
                        detail.find(".details-re-order").text(receivedProduct.ReorderLevel);
                       // detail.find(".details-stock").text(receivedProduct.UnitsOnOrder);
                       // detail.find(".details-stock").text(receivedProduct.ReorderLevel);
                      //  detail.find(".details-stock").text(receivedProduct.c);

                        console.log(receivedProduct)
                      //  debugger;
                        //var template = kendo.template($("#Product_SummaryTemplate").html());
                        //$("#product_detailtemplate_"  + model.ProductID).html(template(receivedProduct));
                }
            })
                
        }
    </script>

<script id="Product_DetailTemplate" type="text/x-kendo-template">
    <img src="/Content/Products/#=ProductID#.jpg" class="product-details-image">
    <div id="product_detailtemplate_#=ProductID#" class="product-details-wrapper" style="background: yellow;">    
    <div class="product-details" style="background: purple;">
        <div class="product-name"></div>
        <div class="product-category"></div>
    </div>
    <div class="product-details"  style="background: red;">
        <h5>Orders QTY.</h5>
           @(Html.Kendo().Sparkline<ProductsSalesByMonth_Result>()
                .HtmlAttributes(new { style="width: 400px"})
                    .Name("chart_#=OrderID#_#=ProductID#")
                    .Series(series => series
                        .Column(column => column.Quantity, categoryExpression: column => column.Date)
                        .Aggregate(ChartSeriesAggregate.Count))
                    .CategoryAxis(axis => axis
                        .Date()
                        .BaseUnit(ChartAxisBaseUnit.Months))
                    .ValueAxis(axis => axis
                        .Numeric()
                        .Line(line => line.Visible(true)))
                    .DataSource(ds => ds.Read("ProductsSalesByMonth", "Products", new { ProductID = "#=ProductID#" }))
                    .ToClientTemplate()
                )   

         <div class="product-details"  style="background: green;">
            <h5>In stock</h5>
            <span class="details-stock"></span>
        </div>
        <div class="product-details"  style="background: orange;">
            <h5>In order</h5>
            <span class="details-orders"></span>
        </div>
        <div class="product-details"  style="background: blue;">
            <h5>Reorder</h5>
            <span class="details-re-order"></span>
        </div>
        <div class="product-details"  style="background: pink;">
            <h5>Qty. per unit</h5>
            <span class="details-re-order"></span>
        </div>
    </div>
   @* <div class="product-category"></div>
    <div class="details-stock"></div>
    <div class="details-orders"></div>
   *@
    </div>
  
    </script>

<script id="Product_DetailTemplate_Origin" type="text/x-kendo-template">
    <img src="/Content/Products/#=ProductID#.jpg" >
    <div id="product_detailtemplate_#=ProductID#">
    <div class="product-details">    
        <div class="product-name"></div>
        <div class="product-category"></div>
    </div>
    <div class="details-stock"></div>
    <div class="details-orders"></div>
        <dd>  
            @(Html.Kendo().Sparkline<ProductsSalesByMonth_Result>()
                .HtmlAttributes(new { style="width: 400px"})
                    .Name("chart_#=OrderID#_#=ProductID#")
                    .Series(series => series
                        .Column(column => column.Quantity, categoryExpression: column => column.Date)
                        .Aggregate(ChartSeriesAggregate.Count))
                    .CategoryAxis(axis => axis
                        .Date()
                        .BaseUnit(ChartAxisBaseUnit.Months))
                    .ValueAxis(axis => axis
                        .Numeric()
                        .Line(line => line.Visible(true)))
                    .DataSource(ds => ds.Read("ProductsSalesByMonth", "Products", new { ProductID = "#=ProductID#" }))
                    .ToClientTemplate()
                )   
        </dd>
       @* <dt class="product-details-cat">In Stock:</dt>
        <dd class="product-details-val details-stock"></dd>
        <dt class="product-details-cat">On Order: </dt> 
        <dd class="product-details-val"></dd>
        <dt class="product-details-cat">Reorder: </dt> 
        <dd class="product-details-val"></dd>
        <dt class="product-details-cat">QTY.PER UNIT: </dt>
        <dd class="product-details-val"></dd>*@
    </dl>
    </div>
  
    </script>



@*<script id="Product_SummaryTemplate" type="text/x-kendo-template">
    <strong>#=data.ProductName#</strong>
    <span>#=data.Category?Category.CategoryName:''#</span>
    <span>CHART</span>
    <span>In Stock: #=data.UnitsInStock#</span>
    <span>On Order: #=data.UnitsOnOrder#</span>
    <span>Reorder: #=data.ReorderLevel#</span>
    <span>QTY.PER UNIT: #=data.QuantityPerUnit#</span>
</script>*@



    </div>

<style scoped>
    .k-detail-cell .k-tabstrip .k-content {
        padding: 0.2em;
    }
    .shipping-details ul
    {
        list-style:none;
        font-style:italic;
        margin: 15px;
        padding: 0;
    }
    .shipping-details ul li
    {
        margin: 0;
        line-height: 1.7em;
    }

    .shipping-details label
    {
        display:inline-block;
        width:90px;
        padding-right: 10px;
        text-align: right;
        font-style:normal;
        font-weight:bold;
    }
</style>