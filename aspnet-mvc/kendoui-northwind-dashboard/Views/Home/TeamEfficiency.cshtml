@*@using KendoUI.Northwind.Dashboard.Models;


<style>
    #dateFilter {
        float: right;
    }
    #EmployeesList { 
        background-color: #EEEEEE;
    }
    #leftColumn {
         width: 20%;
         background-color: #EEEEEE;
    }
    #rightColumn {
         width: 80%;
    }
    .employee {
        display: block; 
        padding: 2px;
    }
    /*.k-scheduler-monthview .k-scheduler-table td {
        height:60px !important; 
    }*/
    #employeeDetails {
        background-color: #FDFDFE; 
    
    }
    #employeeBio {
        height: 200px;
        background-color: #FDFDFE; 
    }
    #employeeStats {
        height: 200px;
    }
    .col {
        float: left;
    }
    .bio {
        float: left;
        width: 33%;
    }
    #employeeAbout {
        height: 200px;
    
    }
    #sparkline-container {  
        width: 200px;
    }
    #EmployeeQuarterSalesLabel {
        font-size: 24px;
    }
    #EmployeeAverageSalesLabel {
        font-size: 24px;
    }
</style>

<script type="text/x-kendo-tmpl" id="employeeItemTemplate">
    <div class="employee">
        <img src="@(Url.Content("~/content/employees/"))#:EmployeeID#-t.png" /> 
        <span>#:FirstName#</span> <span>#:LastName#</span> <br>
        <span>#:Title#</span>
    </div> 
</script>

<script type="text/x-kendo-tmpl" id="employeeBioTemplate">
    <div class="bio">
        ABOUT <br>
        <img src="@(Url.Content("~/content/employees/"))#:EmployeeID#.png" /> 
        <span>#:FirstName#</span> <span>#:LastName#</span> <br>
        <span>#:Title#</span>
        <a href='\\#' class='bioTooltip'> >>FULL BIO <span style='display:none;'>#:Notes#</span> </a>
    </div> 
</script>

<script type="text/javascript">
    $(document).ready(function () {
        $("#TeamEfficiency").addClass("active");
        $("#dateFilter").kendoValidator({
            rules: {
                startDate: function (input) {
                    if (input.is("#StartDate")) {
                        startDate = kendo.parseDate(input.val());
                        endDate = kendo.parseDate($("#EndDate").val());
                        if (startDate > endDate) {
                            return false;
                        }
                    }
                    return true;
                },
                endDate: function (input) {
                    if (input.is("#EndDate")) {
                        startDate = kendo.parseDate($("#StartDate").val());
                        endDate = kendo.parseDate(input.val());
                        if (startDate > endDate) {
                            return false;
                        }
                    }
                    return true;
                },
            },
            messages: {
                startDate: "Start date should preceed the End date.",
                endDate: "End date should not preceed the Start date."
            }
        });
    });

    function onListDataBound(e) {
        this.select($(".employee:first"));
    }
    function onCriteriaChange() { 
        var employeeList = $("#EmployeesList").data("kendoListView"),
            employee = employeeList.dataSource.getByUid(employeeList.select().attr("data-uid")),
            employeeQuarterSales = $("#EmployeeQuarterSales").data("kendoSparkline"),
            employeeAverageSales = $("#EmployeeAverageSales").data("kendoSparkline"),
            teamSales = $("#TeamSales").data("kendoChart"),
            employeeSales = $("#EmployeeSales").data("kendoScheduler"),
            startDate = $("#StartDate").data("kendoDatePicker"),
            endDate = $("#EndDate").data("kendoDatePicker"),
            filter = { EmployeeID: employee.EmployeeID, startDate: startDate.value(), endDate: endDate.value() },
            template = kendo.template($("#employeeBioTemplate").html());
        
        $("#employeeBio").html(template(employee));
        
        employeeSales.dataSource.filter({ field: "EmployeeID", operator: "eq", value: employee.EmployeeID });

        teamSales.dataSource.read(filter);
        //get the totals from the same action method?
        employeeQuarterSales.dataSource.read(filter);
        employeeAverageSales.dataSource.read(filter);
    }
    function getBio(e) {
        return e.target.find("span").text();
    }
    function onQuarterSalesDataBound(e) {
        var data = this.dataSource.at(0);
        $("#EmployeeQuarterSalesLabel").text(kendo.toString(data.Current,"c2"));
    }
    function onAverageSalesDataBound(e) { 
        var data = this.dataSource.aggregates()
        if (data.EmployeeSales) {
            $("#EmployeeAverageSalesLabel").text(kendo.toString(data.EmployeeSales.average, "c2"));
        } else {
            $("#EmployeeAverageSalesLabel").text(kendo.toString(0, "c2"));
        }
    }

</script>

@(Html.Kendo().Tooltip()
    .For("#employeeBio") 
    .Filter("a")
    .ContentHandler("getBio")
)
<div id="header">
    <h2 class="main-section-header">TEAM EFFICIENCY</h2>   
    <div id="dateFilter">
        <label for="StartDate">STATS FROM:</label>
        @(Html.Kendo().DatePicker() 
            .Name("StartDate")
            .Value(new DateTime(1996, 7, 1))
            .Events(e=>e.Change("onCriteriaChange"))
        )
        <span class="k-invalid-msg" data-for="StartDate"></span>
        <label for="EndDate">TO:</label>
        @(Html.Kendo().DatePicker() 
            .Name("EndDate")
            .Value(new DateTime(1997, 7, 1))
            .Events(e=>e.Change("onCriteriaChange"))
        )
        <span class="k-invalid-msg" data-for="EndDate"></span>
    </div>
    <div style="clear:both;"></div>
</div>


<div id="leftColumn" class="col">
    TEAM MEMBERS<br />
    @(Html.Kendo().ListView<EmployeeViewModel>()
        .Name("EmployeesList") 
        .TagName("div") 
        .Events(e=>e.DataBound("onListDataBound").Change("onCriteriaChange"))
        .ClientTemplateId("employeeItemTemplate")
        .DataSource(dataSource => {
            dataSource.Read(read => read.Action("EmployeesList", "Team"));
            dataSource.PageSize(9);
        }) 
        .Selectable(s=>s.Mode(ListViewSelectionMode.Single))
    )
</div>
<div id="rightColumn"class="col">
    <div id="employeeDetails">
        <div id="employeeAbout"> 
            <div id="employeeBio" class="bio">
            </div>
            <div class="bio">
                QUARTER TO DATE SALES<br>
                <span id="EmployeeQuarterSalesLabel"></span>
                <div class="sparkline-container">
                    @(Html.Kendo().Sparkline<QuarterToDateSalesViewModel>()
                        .Name("EmployeeQuarterSales")
                        .Theme("metro")
                        .AutoBind(false)
                        .Events(e=>e.DataBound("onQuarterSalesDataBound"))
                        .DataSource(ds => ds
                            .Read(read => read.Action("EmployeeQuarterSales", "Team"))
                        ) 
                        .Series(series =>
                        {
                            series.Bullet(m => m.Current, m => m.Target);
                        })
                        .ChartArea(a=>a.Width(200)) 
                        .CategoryAxis(c=>c
                            .Date() 
                            .Categories(x=>x.OrderDate) 
                            .BaseUnit(ChartAxisBaseUnit.Months)
                        )
                    )
                </div>
            </div>
            <div class="bio">
                MONTLY AVERAGE SALES<br>
                <span id="EmployeeAverageSalesLabel"></span>
                <div class="sparkline-container">
                    @(Html.Kendo().Sparkline<SalesStatsViewModel>()
                        .Name("EmployeeAverageSales")
                        .Theme("metro")
                        .AutoBind(false)
                        .Events(e=>e.DataBound("onAverageSalesDataBound"))
                        .DataSource(ds => ds
                            .Aggregates(a=>a.Add(s=>s.EmployeeSales).Average())
                            .Read(read => read.Action("EmployeeAverageSales", "Team"))
                        ) 
                        .Series(series =>
                        {
                            series.Line(model => model.EmployeeSales).Width(1.5).Tooltip(t => t.Template("#=kendo.toString(value, 'c2')#"));
                        }) 
                        .ChartArea(a=>a.Width(200))
                        .CategoryAxis(c=>c
                            .Date()
                            .Categories(x=>x.Date)
                        )
                    )
                </div> 
            </div>  
        </div>
        <div id="employeeStats">
            @(Html.Kendo().Chart<SalesStatsViewModel>()
                .Name("TeamSales")
                .Theme("metro")
                .HtmlAttributes(new {style = "height:200px;" } )
                .AutoBind(false)
                .Legend(l=>l.Position(ChartLegendPosition.Bottom))
                .DataSource(ds => ds.Read(read => read.Action("EmployeeAndTeamSales", "Team")))
                .Series(series =>
                {
                    series.Column(model => model.EmployeeSales, categoryExpression: model => model.Date).Name("Employee Sales").Aggregate(ChartSeriesAggregate.Sum);
                    series.Column(model => model.TotalSales, categoryExpression: model => model.Date).Name("Team Sales").Aggregate(ChartSeriesAggregate.Sum);
                })
                .CategoryAxis(axis => axis
                    .Date()
                    .BaseUnit(ChartAxisBaseUnit.Months)
                    .Labels(labels => labels.Rotation(-90))
                    .MajorGridLines(lines => lines.Visible(false))
                )
                .ValueAxis(axis => axis.Numeric()
                    .Labels(labels => labels.Format("{0:c2}"))
                    .MajorUnit(25000)
                    .Line(line => line.Visible(false))
                )
                .Tooltip(tooltip => tooltip
                    .Visible(true)
                    .Format("{0:c2}")
                )
            )
        </div>
        <div id="employeeSchedule">
            @(Html.Kendo().Scheduler<SaleViewModel>()
                .Name("EmployeeSales")
                .AutoBind(false)
                .Date(new DateTime(1996, 7, 1))
                .Views(views =>
                {
                    views.MonthView();
                })
                .Editable(false)
                .Timezone("Etc/UTC")
                .Resources(resource =>
                {
                    resource.Add(m => m.EmployeeID)
                        .Title("Employee") 
                        .DataTextField("EmployeeName")
                        .DataValueField("EmployeeID") 
                        .DataSource(dataSource => {
                            dataSource.Read(read => read.Action("GetEmployees", "Team"));
                        });
                })
                .DataSource(d => d.Read("EmployeeSales", "Team"))
            )
        </div>
    </div>
</div>*@

@using KendoUI.Northwind.Dashboard.Models;


<style>
  
    #EmployeesList { 
        background-color: #eee;
    }
    #employee-list-column {
       
         background-color: #eee;
    }
    #employee-details-column {
       
    }
    .employee {
        display: block; 
       
    }
    /*.k-scheduler-monthview .k-scheduler-table td {
        height:60px !important; 
    }*/
    #employeeDetails {
        background-color: #FDFDFE; 
    
    }
    #employeeBio {
        /*height: 200px;*/
        background-color: #FDFDFE; 
    }
    #employeeStats {
        /*height: 200px;*/
    }
    /*.col {
        float: left;
    }*/
  
    #employeeAbout {
        /*height: 200px;*/
    
    }
    #sparkline-container {  
        width: 200px;
    }
  
</style>

<script type="text/x-kendo-tmpl" id="employeeItemTemplate">
    <div class="employee">
        <img src="@(Url.Content("~/content/employees/"))#:EmployeeID#-t.png" class="img-responsive employee-list-image"/> 
        <div class="employee-list-details">    
            <p class="name">#:FirstName#</span><span class="last-name">#:LastName#</p>
            <p class="title">#:Title#</p>
        </div>
    </div> 
</script>

<script type="text/x-kendo-tmpl" id="employeeBioTemplate">
    <div>
        <h3>ABOUT</h3>
        <img src="@(Url.Content("~/content/employees/"))#:EmployeeID#.png" class="img-responsive employee-details-image" /> 
        <div class="employee-bio-details">
            <p>#:FirstName# <span>#:LastName#</span></p>
            <p>#:Title#</p>
            <a href='\\#' class='bioTooltip'> >>FULL BIO <span style='display:none;'>#:Notes#</span> </a>
        </div>
    </div> 
</script>

<script type="text/javascript">
    $(document).ready(function () {
        $("#TeamEfficiency").addClass("active");
        $("#dateFilter").kendoValidator({
            rules: {
                startDate: function (input) {
                    if (input.is("#StartDate")) {
                        startDate = kendo.parseDate(input.val());
                        endDate = kendo.parseDate($("#EndDate").val());
                        if (startDate > endDate) {
                            return false;
                        }
                    }
                    return true;
                },
                endDate: function (input) {
                    if (input.is("#EndDate")) {
                        startDate = kendo.parseDate($("#StartDate").val());
                        endDate = kendo.parseDate(input.val());
                        if (startDate > endDate) {
                            return false;
                        }
                    }
                    return true;
                },
            },
            messages: {
                startDate: "Start date should preceed the End date.",
                endDate: "End date should not preceed the Start date."
            }
        });
    });

    function onListDataBound(e) {
        this.select($(".employee:first"));
    }
    function onCriteriaChange() { 
        var employeeList = $("#EmployeesList").data("kendoListView"),
            employee = employeeList.dataSource.getByUid(employeeList.select().attr("data-uid")),
            employeeQuarterSales = $("#EmployeeQuarterSales").data("kendoSparkline"),
            employeeAverageSales = $("#EmployeeAverageSales").data("kendoSparkline"),
            teamSales = $("#TeamSales").data("kendoChart"),
            employeeSales = $("#EmployeeSales").data("kendoScheduler"),
            startDate = $("#StartDate").data("kendoDatePicker"),
            endDate = $("#EndDate").data("kendoDatePicker"),
            filter = { EmployeeID: employee.EmployeeID, startDate: startDate.value(), endDate: endDate.value() },
            template = kendo.template($("#employeeBioTemplate").html());
        
        $("#employeeBio").html(template(employee));
        
        employeeSales.dataSource.filter({ field: "EmployeeID", operator: "eq", value: employee.EmployeeID });

        teamSales.dataSource.read(filter);
        //get the totals from the same action method?
        employeeQuarterSales.dataSource.read(filter);
        employeeAverageSales.dataSource.read(filter);
    }
    function getBio(e) {
        return e.target.find("span").text();
    }
    function onQuarterSalesDataBound(e) {
        var data = this.dataSource.at(0);
        $("#EmployeeQuarterSalesLabel").text(kendo.toString(data.Current,"c2"));
    }
    function onAverageSalesDataBound(e) { 
        var data = this.dataSource.aggregates()
        if (data.EmployeeSales) {
            $("#EmployeeAverageSalesLabel").text(kendo.toString(data.EmployeeSales.average, "c2"));
        } else {
            $("#EmployeeAverageSalesLabel").text(kendo.toString(0, "c2"));
        }
    }

    $(window).on("resize", function () {
        kendo.resize($("#TeamSales"));
    });
</script>

@(Html.Kendo().Tooltip()
    .For("#employeeBio") 
    .Filter("a")
    .ContentHandler("getBio")
)

<div id="header-wrapper" class="row">
    <h2 id="team-efficiency" class="main-section-header col-xs-6">Team efficiency</h2>   
    <div id="dateFilter" class="col-xs-6">
        <label for="StartDate" class="select-period">Stats from</label>
        @(Html.Kendo().DatePicker() 
            .Name("StartDate")
            .Value(new DateTime(1996, 7, 1))
            .Events(e=>e.Change("onCriteriaChange"))
        )
        <span class="k-invalid-msg" data-for="StartDate"></span>
        <label for="EndDate" class="select-period">To</label>
        @(Html.Kendo().DatePicker() 
            .Name("EndDate")
            .Value(new DateTime(1997, 7, 1))
            .Events(e=>e.Change("onCriteriaChange"))
        )
        <span class="k-invalid-msg" data-for="EndDate"></span>
    </div>
    <div style="clear:both;"></div>
</div>

<div class="main-section-content row" style="background: purple;">

<div id="employee-list-column" class="col col-xs-3">
    <h3>TEAM MEMBERS</h3>
    @(Html.Kendo().ListView<EmployeeViewModel>()
        .Name("EmployeesList") 
        .TagName("div") 
        .Events(e=>e.DataBound("onListDataBound").Change("onCriteriaChange"))
        .ClientTemplateId("employeeItemTemplate")
        .DataSource(dataSource => {
            dataSource.Read(read => read.Action("EmployeesList", "Team"));
            dataSource.PageSize(9);
        }) 
        .Selectable(s=>s.Mode(ListViewSelectionMode.Single))
    )
</div>
<div id="employee-details-column"class="col col-xs-9" style="background: yellow;">
    <div id="employeeDetails" class="row">
        <div id="employeeAbout" class="col-xs-12 placeholder">
            <div class="row"> 
            <div id="employeeBio" class="col-xs-4">
            </div>
            <div class="col-xs-4">
                <h3>Quarter to date sales</h3>
                <span id="EmployeeQuarterSalesLabel"></span>
                <div class="sparkline-container">
                    @(Html.Kendo().Sparkline<QuarterToDateSalesViewModel>()
                        .Name("EmployeeQuarterSales")
                        .Theme("metro")
                        .AutoBind(false)
                        .Events(e=>e.DataBound("onQuarterSalesDataBound"))
                        .DataSource(ds => ds
                            .Read(read => read.Action("EmployeeQuarterSales", "Team"))
                        ) 
                        .Series(series =>
                        {
                            series.Bullet(m => m.Current, m => m.Target);
                        })
                        .ChartArea(a=>a.Width(200)) 
                        .CategoryAxis(c=>c
                            .Date() 
                            .Categories(x=>x.OrderDate) 
                            .BaseUnit(ChartAxisBaseUnit.Months)
                        )
                    )
                </div>
            </div>
            <div class="col-xs-4">
                <h3>Monthly Average Sales</h3>
                <span id="EmployeeAverageSalesLabel"></span>
                <div class="sparkline-container">
                    @(Html.Kendo().Sparkline<SalesStatsViewModel>()
                        .Name("EmployeeAverageSales")
                        .Theme("metro")
                        .AutoBind(false)
                        .Events(e=>e.DataBound("onAverageSalesDataBound"))
                        .DataSource(ds => ds
                            .Aggregates(a=>a.Add(s=>s.EmployeeSales).Average())
                            .Read(read => read.Action("EmployeeAverageSales", "Team"))
                        ) 
                        .Series(series =>
                        {
                            series.Line(model => model.EmployeeSales).Width(1.5).Tooltip(t => t.Template("#=kendo.toString(value, 'c2')#"));
                        }) 
                        .ChartArea(a=>a.Width(200))
                        .CategoryAxis(c=>c
                            .Date()
                            .Categories(x=>x.Date)
                        )
                    )
                </div> 
            </div> 
            </div>     
        </div>
        <div id="employeeStats" class="col-xs-12">
            @(Html.Kendo().Chart<SalesStatsViewModel>()
                .Name("TeamSales")
                .Theme("metro")
                .HtmlAttributes(new {style = "height:200px;" } )
                .AutoBind(false)
                .Legend(l=>l.Position(ChartLegendPosition.Bottom))
                .DataSource(ds => ds.Read(read => read.Action("EmployeeAndTeamSales", "Team")))
                .Series(series =>
                {
                    series.Column(model => model.EmployeeSales, categoryExpression: model => model.Date).Name("Employee Sales").Aggregate(ChartSeriesAggregate.Sum);
                    series.Column(model => model.TotalSales, categoryExpression: model => model.Date).Name("Team Sales").Aggregate(ChartSeriesAggregate.Sum);
                })
                .CategoryAxis(axis => axis
                    .Date()
                    .BaseUnit(ChartAxisBaseUnit.Months)
                    .Labels(labels => labels.Rotation(-90))
                    .MajorGridLines(lines => lines.Visible(false))
                )
                .ValueAxis(axis => axis.Numeric()
                    .Labels(labels => labels.Format("{0:c2}"))
                    .MajorUnit(25000)
                    .Line(line => line.Visible(false))
                )
                .Tooltip(tooltip => tooltip
                    .Visible(true)
                    .Format("{0:c2}")
                )
            )
        </div>
        <div id="employeeSchedule" class="col-xs-12">
            @(Html.Kendo().Scheduler<SaleViewModel>()
                .Name("EmployeeSales")
                .AutoBind(false)
                .Date(new DateTime(1996, 7, 1))
                .Views(views =>
                {
                    views.MonthView();
                })
                .Editable(false)
                .Timezone("Etc/UTC")
                .Resources(resource =>
                {
                    resource.Add(m => m.EmployeeID)
                        .Title("Employee") 
                        .DataTextField("EmployeeName")
                        .DataValueField("EmployeeID") 
                        .DataSource(dataSource => {
                            dataSource.Read(read => read.Action("GetEmployees", "Team"));
                        });
                })
                .DataSource(d => d.Read("EmployeeSales", "Team"))
            )
        </div>
    </div>
</div>
    </div>